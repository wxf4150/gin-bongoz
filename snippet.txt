package controls

import (
	"github.com/gin-gonic/gin"
	"github.com/wxf4150/gin-bongoz"
	"github.com/go-bongo/bongo"
	"capi/utils"
)

//  // snippet key gbzdt  (gin bongoz doc-swagger template snippet)
// //swagger docs

var collectionName="$StructName$s"
var mgo$StructName$=utils.Mconn.C(collectionName)
var bgo$StructName$=utils.Bconn.Collection(collectionName)

//move to main.go
//controls.AddBlogRouter(router,"$apiroot$")

func Add$StructName$Router(router *gin.Engine,rootpath string ){
	//rootpath:="$apiroot$"
	rg:=router.Group(rootpath)
	endpoint := bongoz.NewEndpoint("/$StructName$s", utils.Bconn, collectionName)
	endpoint.Factory=func () bongo.Document {
             	return &$StructName${}
             }
	endpoint.QueryParams=[]string{"status","_id"}
	endpoint.AllowFullQuery=true
	endpoint.Register(rg)
}
type $StructName$ struct {
	bongo.DocumentBase `bson:",inline"`
	Name   string      `bson:",omitempty" example:"科技园"`
	BossID string      `bson:",omitempty" example:"李四"`
	Status int         `bson:",omitempty" example:"1"`
}
type $StructName$ListModel struct {
	*bongo.PaginationInfo
	Data       []$StructName$
}


// @Summary　$StructDes$添加
// @Description $StructDes$添加
// @ID $StructName$CreateHandler
// @Accept  json
// @Produce  json
// @Param   token     header    string true "token header"
// @Param   model     body    controls.$StructName$ true "modle_create json"
// @Success 200 {object} controls.$StructName$	"user json"
// @Failure 500 {object} controls.ApiErr "err obj"
// @Failure 401 {object} controls.ApiErr "err obj"
// @Router $apiroot$/$StructName$s [post]
func $StructName$CreateHandler(c *gin.Context) {

}


// @Summary　$StructDes$修改
// @Description $StructDes$修改
// @ID $StructName$UpdateHandler
// @Accept  json
// @Produce  json
// @Param   token     header    string true "tokenstr"
// @Param   model     body    controls.$StructName$ true "modle_create json"
// @Success 200 {object} controls.$StructName$	"user json"
// @Failure 500 {object} controls.ApiErr "err obj"
// @Failure 401 {object} controls.ApiErr "err obj"
// @Router $apiroot$/$StructName$s/{id} [post]
func $StructName$UpdateHandler(c *gin.Context) {

}


// @Summary　按id 查询$StructDes$
// @Description 按id 查询$StructDes$
// @ID $StructName$GetHandler
// @Accept  json
// @Produce  json
// @Param   token     header    string true "tokenstr"
// @Param   id     path    string true "$StructDes$ objectid"
// @Success 200 {object} controls.$StructName$	"user json"
// @Failure 500 {object} controls.ApiErr "err obj"
// @Failure 401 {object} controls.ApiErr "err obj"
// @Router $apiroot$/$StructName$s/{id} [get]
func $StructName$GetHandler(c *gin.Context) {

}


// @Summary　$StructDes$列表查询
// @Description $StructDes$列表查询. 支持的条件格式见：https://github.com/wxf4150/gin-bongoz
// @ID $StructName$GetListHandler
// @Accept  json
// @Produce  json
// @Param   token     header    string true "tokenstr"
// @Param   status     query    string false "$StructDes$ status"
// @Param   _query     query    string false "mongo查询对象 如{status:2}，支持的条件格式见：https://github.com/wxf4150/gin-bongoz"
// @Success 200 {object} controls.$StructName$ListModel	"list json"
// @Failure 500 {object} controls.ApiErr "err obj"
// @Failure 401 {object} controls.ApiErr "err obj"
// @Router $apiroot$/$StructName$s [get]
func $StructName$GetListHandler(c *gin.Context) {

}
